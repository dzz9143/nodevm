#!/usr/bin/env node

var createApp = require('../app');
var debug = require('debug')('service:server');
var http = require('http');
var findFreePort = require('find-free-port');
var hostname = '127.0.0.1';
var fetch = require('isomorphic-fetch');
var vm = require('vm');

function createCode(body) {
  return `
    (function(req, res){
      ${body}
    })
  `
}

(async () => {
  const { serviceName } = process.env;

  var resp = await fetch(`http://127.0.0.1:3000/services/${serviceName}/functions`).then(res => res.json());
  console.log('functions:', resp.functions);
  let funcMap = {};
  Object.keys(resp.functions).map(name => {
    const body = resp.functions[name];
    funcMap[name] = vm.runInNewContext(createCode(body), Object.create(null))
  })
  console.log('funcMap:', funcMap);

  var app = createApp(funcMap);
  var server = http.createServer(app);

  findFreePort(10000, hostname, (err, freePort) => {
    if (err) {
      process.exit(1);
    }

    var port = normalizePort(freePort);
    server.listen(port, hostname, () => {
      console.log(`serivce on http://${hostname}:${port}`);
      process.send({
        type: 'SUCCESS',
        address: `${hostname}:${port}`,
      });
    });
    server.on('error', onError);
    server.on('listening', onListening);

    function normalizePort(val) {
      var port = parseInt(val, 10);

      if (isNaN(port)) {
        // named pipe
        return val;
      }

      if (port >= 0) {
        // port number
        return port;
      }

      return false;
    }

    function onError(error) {
      if (error.syscall !== 'listen') {
        throw error;
      }

      var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

      // handle specific listen errors with friendly messages
      switch (error.code) {
        case 'EACCES':
          console.error(bind + ' requires elevated privileges');
          process.exit(1);
          break;
        case 'EADDRINUSE':
          console.error(bind + ' is already in use');
          process.exit(1);
          break;
        default:
          throw error;
      }
    }

    function onListening() {
      var addr = server.address();
      var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
      debug('Listening on ' + bind);
    }
  });


})();

